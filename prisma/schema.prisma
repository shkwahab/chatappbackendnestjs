generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String    @unique @db.String
  img       String    @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png")
  email     String    @unique @db.String
  password  String    @db.String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  // Relationships managed through join table
  roomMemberships       RoomMembership[]
  sentMessages          MessageMemberShip[]     @relation("SentMessages")
  receivedMessages      MessageMemberShip[]     @relation("ReceivedMessages")
  adminRooms            Rooms[]                 @relation("Admin")
  messageStatuses       MessageStatus[]
  notificationSender    Notifications[]         @relation("notificationSender")
  NotificationReceivers NotificationReceivers[]
  Notifier              Notifier[]
}

model Rooms {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  img       String    @default("")
  adminId   String    @db.ObjectId
  isPublic  Boolean   @default(false) // Indicates if the room is public
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relationships managed through join table
  adminUser         User                @relation("Admin", fields: [adminId], references: [id])
  messageMembership MessageMemberShip[]
  messageStatuses   MessageStatus[]
  roomMemberships   RoomMembership[]
}

model RoomMembership {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId 
  request    RequestRole      @default(NONE)
  roomId     String           @db.ObjectId
  role       UserRole         @default(USER)
  isBlocked  Boolean          @default(false)
  isApproved Boolean          @default(false) // Indicates if the user has been approved to join the room
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())

  @@unique([roomId,userId])

  user User  @relation(fields: [userId], references: [id])
  room Rooms @relation(fields: [roomId], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // relationship
  messageMembership MessageMemberShip[]
  messageStatuses   MessageStatus[]
}

model MessageMemberShip {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  messageId  String    @unique @db.ObjectId
  senderId   String    @db.ObjectId
  receiverId String?    @db.ObjectId
  roomId     String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  room     Rooms   @relation(fields: [roomId], references: [id])
  sender   User    @relation("SentMessages", fields: [senderId], references: [id])
  receiver User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  message  Message @relation(fields: [messageId], references: [id])
}

model MessageStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId String   @unique @db.ObjectId
  userId    String   @db.ObjectId
  roomId    String   @db.ObjectId
  isRead    Boolean  @default(false)
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  room    Rooms   @relation(fields: [roomId], references: [id])

  @@unique([messageId, userId]) // Ensure a user can only have one status per message
}

model Notifications {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  event     String?
  type      NotificationType
  url       String?
  senderId  String           @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  notificationSender    User                    @relation("notificationSender", fields: [senderId], references: [id])
  NotificationReceivers NotificationReceivers[]
}

model NotificationReceivers {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String @db.ObjectId
  receiverId     String @db.ObjectId

  notification Notifications @relation(fields: [notificationId], references: [id])
  receiver     User          @relation(fields: [receiverId], references: [id])

  @@unique([notificationId, receiverId])
}


model Notifier {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  endpoint  String
  keys      Json
  userAgent String?
  deviceId  String?
  
  user      User      @relation(fields: [userId],references: [id])
  @@unique([userId, endpoint])
}


enum UserRole {
  USER
  ADMIN
}

enum RequestRole{
  REQUEST
  INVITATION
  NONE
}
enum NotificationType {
  Message
  Action
}
